// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model University {
  id           Int             @id @default(autoincrement())
  name         String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  laboratories Laboratory[]
  institution  InstitutionType
}

/// 国立、公立、私立など
enum InstitutionType {
  NATIONAL
  PRIVATE
  PUBLIC
}

// 学問分野
model AcademicDiscipline {
  id           Int          @id @default(autoincrement())
  name         String
  type         ScienceType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  laboratories Laboratory[]
}

enum ScienceType {
  SOCIAL // 社会科学
  NATURAL // 自然科学
  FORMAL // 形式科学
  HUMANITIES // 人文科学
  APPLIED // 応用科学
}

enum LaboType {
  DEFAULT // 普通の講座
  COOPORATIVE // 協力講座
  AFFILIATED // 連携講座
}

model Laboratory {
  id           String               @id @default(cuid())
  university   University           @relation(fields: [univId], references: [id])
  univId       Int
  discipline   AcademicDiscipline   @relation(fields: [disciplineId], references: [id]) //
  disciplineId Int
  name         String // ~~~~講座
  seminarName  String // ~~~~研究室
  course       String
  major        String
  websiteUrl   String
  email        String
  telNumber    String // 電話番号
  fax          String // FAX番号
  postCode     String // 郵便番号
  access       String[] // 研究室へのアクセス情報
  address      String // 住所
  paperSummary String // 論文の要約
  prefectureId Int // 1~47の数字. 別途APIを作成して管理する
  laboType     LaboType
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  scholars     Scholar[]
  tags         TagsOnLaboratories[]

  @@index([univId])
  @@index([disciplineId])
  @@index([prefectureId])
}

model Tag {
  id           String               @id
  name         String               @unique
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  laboratories TagsOnLaboratories[]
}

model TagsOnLaboratories {
  laboratory Laboratory @relation(fields: [laboId], references: [id])
  laboId     String
  tag        Tag        @relation(fields: [tagId], references: [id])
  tagId      String
  assignedAt DateTime   @default(now())
  assignedBy String

  @@id([laboId, tagId])
  @@index([laboId])
  @@index([tagId])
}

model Scholar {
  id              String     @id @default(cuid())
  laboratory      Laboratory @relation(fields: [laboId], references: [id])
  laboId          String
  name_ja         String
  name_en         String?
  position_ja     String
  position_en     String?
  email           String?    @unique
  telNumber       String?
  iconUri         String?
  googleScholarId String?    @unique
  researchMapId   String?    @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([laboId])
}

model Paper {
  id Int @id @default(autoincrement())
}

// Auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
